name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    # Service containers to run with `test`
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432 # Map port for potential local connection if needed, primarily for service access
        # Needed to connect health checks to database
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "Waiting for PostgreSQL..."
        until pg_isready -h localhost -p 5432 -U $POSTGRES_USER -d $POSTGRES_DB; do
          sleep 1
        done
        echo "PostgreSQL is ready!"
      env:
        POSTGRES_USER: testuser
        POSTGRES_PASSWORD: testpassword
        POSTGRES_DB: testdb
        PGPASSWORD: testpassword # psql command needs this env var

    - name: Start Celery worker in background
      run: |
        source .venv/bin/activate
        # Start Celery worker in background
        celery --app pi_auto_api.tasks:app worker --pool=solo -Q default -c 1 > celery.log 2>&1 &
        echo "Celery worker started in background"
      env:
        SUPABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        SUPABASE_KEY: dummy-key
        DOCASSEMBLE_URL: http://localhost:5000
        REDIS_URL: redis://localhost:6379/0

    - name: Run Alembic migrations
      run: |
        # Source the venv - adjust path if needed based on poetry config
        source .venv/bin/activate
        alembic upgrade head
      env:
        # Use the service container for migrations
        SUPABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        # SUPABASE_KEY is not strictly needed for direct DB connection but good practice
        SUPABASE_KEY: dummy-key

    - name: Seed database
      run: |
        psql -h localhost -p 5432 -U $POSTGRES_USER -d $POSTGRES_DB -a -f seed.sql
      env:
        POSTGRES_USER: testuser
        POSTGRES_PASSWORD: testpassword
        POSTGRES_DB: testdb
        PGPASSWORD: testpassword # psql command needs this env var

    - name: Run tests with coverage
      run: |
        # Source the venv
        source .venv/bin/activate
        # Run pytest with coverage and fail if below 80%
        pytest --cov=src/pi_auto --cov-report=term-missing --cov-fail-under=80
      env:
        # Use the service container for tests
        TEST_DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
        # Environment variables needed by the application/tests if they read .env
        SUPABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        SUPABASE_KEY: dummy-key
        REDIS_URL: redis://localhost:6379/0

    - name: Run pre-commit hooks
      run: |
        # Source the venv
        source .venv/bin/activate
        pre-commit run --all-files

  fastapi:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Start API in background
      run: |
        source .venv/bin/activate
        # Start FastAPI in background
        nohup uvicorn pi_auto_api.main:app --host 0.0.0.0 --port 9000 > api.log 2>&1 &
        echo "API started on port 9000, waiting for it to be ready..."
        # Wait for API to start
        timeout 30 bash -c 'until curl -s http://localhost:9000/healthz; do sleep 1; done'
      env:
        SUPABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        SUPABASE_KEY: dummy-key
        DOCASSEMBLE_URL: http://localhost:5000
        REDIS_URL: redis://localhost:6379/0

    - name: Run API tests
      run: |
        source .venv/bin/activate
        pytest tests/test_api_basic.py -v
      env:
        SUPABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        SUPABASE_KEY: dummy-key
        DOCASSEMBLE_URL: http://localhost:5000
        REDIS_URL: redis://localhost:6379/0

  docassemble:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Install dependencies
      run: poetry install --no-interaction

    # Set up Docker Buildx for caching
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Cache Docker layers
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Start Docassemble
      run: |
        cd docker/docassemble
        # Pull images with layer caching
        docker pull jhpyle/docassemble:latest
        docker pull postgres:13-alpine
        # Start containers
        docker compose up -d
        echo "Waiting for Docassemble to start..."
        sleep 30  # Give some initial time for containers to start

    - name: Check Docassemble health
      run: |
        source .venv/bin/activate
        python scripts/health_docassemble.py --retries 15 --delay 10

    - name: Check template volume mounting
      run: |
        mkdir -p templates
        echo "Test template file" > templates/test.yml
        docker exec docassemble ls -la /usr/share/docassemble/files/templates/
        docker exec docassemble cat /usr/share/docassemble/files/templates/test.yml
        if [ $? -ne 0 ]; then
          echo "Template volume mounting failed"
          exit 1
        fi

    - name: Stop Docassemble
      if: always()
      run: |
        cd docker/docassemble
        docker compose down
