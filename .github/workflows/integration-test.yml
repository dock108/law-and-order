name: Nightly Integration Test

on:
  # Run at 02:30 UTC daily on main branch
  schedule:
    - cron: '30 2 * * *'

  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  happy-path-test:
    runs-on: ubuntu-latest
    # Service containers to run with the integration tests
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      docassemble:
        image: jhpyle/docassemble:latest
        ports:
          - 5000:80
        options: >-
          --health-cmd "curl --fail http://localhost:80/health || exit 1"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 6
          --health-start-period 30s

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5432 -U testuser -d testdb -t 1; do
            sleep 2
          done
          echo "PostgreSQL is ready!"

          echo "Waiting for Redis..."
          until redis-cli -h localhost -p 6379 ping; do
            sleep 2
          done
          echo "Redis is ready!"

          echo "Waiting for Docassemble..."
          until curl --fail --silent --output /dev/null http://localhost:5000/health || exit 1; do
            sleep 5
          done
          echo "Docassemble is ready!"
        env:
          PGPASSWORD: testpassword

      - name: Start Celery worker in background
        run: |
          source .venv/bin/activate
          # Start Celery worker in background
          celery --app pi_auto_api.tasks:app worker --pool=solo -Q default -c 1 > celery.log 2>&1 &
          echo "Celery worker started in background"
        env:
          SUPABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          SUPABASE_KEY: test-key
          DOCASSEMBLE_URL: http://localhost:5000
          REDIS_URL: redis://localhost:6379/0

      - name: Run Alembic migrations
        run: |
          source .venv/bin/activate
          alembic upgrade head
        env:
          SUPABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          SUPABASE_KEY: test-key

      - name: Seed test database
        run: |
          psql -h localhost -p 5432 -U testuser -d testdb -a -f seed.sql
        env:
          PGPASSWORD: testpassword

      - name: Create mock DocuSign private key
        run: |
          mkdir -p tests/integration/resources
          cat > tests/integration/resources/mock_private_key.pem << 'EOL'
          -----BEGIN RSA PRIVATE KEY-----
          MIIEpAIBAAKCAQEA3Hx6Zm2ygT4qluvO6Ps9PWcGDx2Tz9I4d/y+2t4pA2D2XvKP
          lGD/vsFXtqMw0gkQbBL5A5ZtmMxI/c3xc18rjMG9CwsSBCwR6L1UPrUg3MRhLSSD
          R0lKtslMJxK9tGn3y3RCzuZasaLSL9Mk/DSLJm0oE9G7n3QF1g/ZDBxELI60uRVY
          9v4uPILZiEcT7s54H7W9R1WMDnILzYn1yFCpHZ8qEDT3fHyJl2a5MWrI1k1vOXrO
          QJpVZMa+WBVfTu9uNyASc3YbEZ7Dy1zwvFJEQOhZtz3uVYoOD7HW3JV/6K0QnSEF
          C6Sw5aVqTyYDL23XLcF0288MocTwYSCZcMGOkQIDAQABAoIBAQCVoWbmKgFdIiB1
          kyCQYrY/gB/AVCUeZ+VzQAJGJfEVQmvLGPm71qA7ibD35n/w8aQ7QYK+9rN9yK/6
          V5iUVLELF6eDC5LUvpK8UGpXdDJF3Vg07GxBa7pxkRCvOWwV46joGYK56oYQvxn8
          K1EQPZHPshVjBRXrcxXQXwww5kBCQKULGN1v12U6GHxNRIBaXnLWEZ1QhM0p59QD
          wPEKQcD6LiN2ZfJPiVCpkC4ZsxDOX9M0KkVCWvZ3PqJbWMIwnm3vXjbp5F/VLbvA
          i5SIYjbIsGRKpuCq0gD25Qg43k6QWb+BW+4hSY4MDFfxfWQDTJGjP4mFDHjLtZXO
          I2TI9WoBAoGBAPUzIqmI1Z8LrGDgdLCefIhp2mmG0QRTU3X4NZs6bprj8F0j0fjW
          J9o1L1G5IUe2a+QKMf3W0OEZvOYE2bpC/BuWAJZZFEoFhsIyZSX8TPn6aXM9vDL7
          jB0P9JpBxYfbDdl5Xm3O2+1cXdSKF8oG0XFzVA5JXjSGNMZ/Y5j2bNPxAoGBAOZL
          7CIRQkL0OmvzWxNFBAkRkKJYgKJYIJB8QKwUQXEFJ3hBqGAprGXKa2vCx2Lv0Ldx
          A+eLdAMKsGsBsBjVJ3nAK9YM0n+RjNr6JvYCpVIYbD8KaAKEMnXjmXxKxpXXYaJr
          9tlKcFDQZ7qRYvl9XgnF9gJzTPbSM+OHzDQcUklRAoGAJLMvChyJswfH979JYUPW
          YA8O8xLR6cEbK0a92mTj+DMC7HuqfbDCaKGoUtmXJlJEV6pLrrzRvNRUYZkfTrZP
          jmALrCNbqIXWKYGQg/bLlQBQdWt+Y4v0ehOcW6UaGkxjdcz7Hty95yBkQlSYS7hW
          0NHYyZf5YprQcOFIFUU4ylECgYEAiA0VvaPAK6rLXLNpCj6zZ3HiUc3MSQFfAArF
          9IM5q7iqNx5CzvdXeF+XTgDgbZr5m8YxvLvtOGwCkSZ8TZq4n7BNUhTW/3rAEbFO
          K4Hx5XhUhKRYVXV8bsSbc0IAqCfQTHnTRQYCqsYIVqEy1AYGeHxmzuxBlM20aVxg
          +K6Sw5ECgYACX67EmfGoPVFvJD2j+LLc7NmZ13mMysLCGVaUbGQ5QTJ8Qtwz6kfG
          8eEq9qZ/t37s6HoYIHQjTM1MzbWJpgZLxCXF8y5GQWsZfCMcK1bvM5J+AxszBjuT
          Nf8DgmBqK6J3vpvfPCPZgK5IlTHnZBdBiXSIFXLMplOSzQCkZw==
          -----END RSA PRIVATE KEY-----
          EOL

      - name: Run integration tests
        run: |
          source .venv/bin/activate
          # Run pytest with integration marker and generate JUnit report
          pytest -v -m integration tests/integration/test_happy_path.py --junitxml=junit-report.xml --cov=src/pi_auto --cov-report=term-missing --cov-report=xml
        env:
          SUPABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          SUPABASE_KEY: test-key
          DOCASSEMBLE_URL: http://localhost:5000
          REDIS_URL: redis://localhost:6379/0
          # Test-specific settings
          TEST_DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            junit-report.xml
            coverage.xml
          retention-days: 7
        if: always() # Upload even if tests fail

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: junit-report.xml
        if: always() # Publish even if tests fail
